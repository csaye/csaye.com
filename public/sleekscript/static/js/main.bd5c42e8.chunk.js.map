{"version":3,"sources":["components/Editor/Editor.module.css","sleekscript/lexer.js","sleekscript/parser.js","sleekscript/compiler.js","sleekscript/analyzer.js","components/Editor/Editor.js","components/App/App.js","index.js","components/App/App.module.css"],"names":["module","exports","index","code","undefined","tokens","separators","operators","symbols","keywords","subs","processChar","char","comment","length","push","type","value","readComment","string","readString","match","word","includes","readWord","number","readNumber","statement","processToken","token","keyword","getKeyword","getSub","doPad","prevToken","getStatementCode","inputStatement","compile","tree","js","varnames","varname","join","prevStatement","treeIndex","parse","analyze","inputCode","lex","Editor","useState","inCode","setInCode","outCode","setOutCode","useEffect","timeout","setTimeout","compiled","clearTimeout","className","styles","container","onBeforeChange","e","d","v","options","lineWrapping","mode","theme","App","header","links","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd5c42e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Editor_container__36r4Q\"};","// globals\nlet index = 0;\nlet code = undefined;\nlet tokens = [];\n\n// preset types\nconst separators = [';', '\\n'];\nconst operators = [ '+', '-', '*', '/', '%', '='];\nconst symbols = ['(', ')', '.', '!'];\nconst keywords = [\n  'and', 'or', 'is', 'isnt', 'not',\n  'yes', 'no', 'on', 'off'\n];\nconst subs = ['print'];\n\n// reads comment token to newline\nfunction readComment() {\n  let comment = '';\n  index += 1;\n  // read to end of code\n  while (index < code.length) {\n    // break if newline\n    if (code[index] === '\\n') {\n      index -= 1;\n      break;\n    }\n    // append char to comment\n    comment += code[index];\n    index++;\n  }\n  // push comment token\n  tokens.push({ type: 'comment', value: comment });\n}\n\n// reads string to end quote\nfunction readString() {\n  let string = '';\n  index += 1;\n  // read to end of code\n  while (index < code.length) {\n    // break if unescaped close quote\n    if (code[index] === '\"' && code[index - 1] !== '\\\\') break;\n    // append char to string\n    string += code[index];\n    index += 1;\n  }\n  // push string token\n  tokens.push({ type: 'string', value: string });\n}\n\n// reads word to nonalphanumeric character\nfunction readWord() {\n  let word = '';\n  // read to end of code\n  while (index < code.length) {\n    // break if not alphanumeric character\n    if (!code[index].match(/\\w/)) {\n      index -= 1;\n      break;\n    }\n    // append char to word\n    word += code[index];\n    index += 1;\n  }\n  // push word\n  if (keywords.includes(word)) tokens.push({ type: 'keyword', value: word });\n  else if (subs.includes(word)) tokens.push({ type: 'sub', value: word });\n  else if (word === 'if') {\n    tokens.push({ type: 'keyword', value: 'if' });\n    tokens.push({ type: 'symbol', value: '(' });\n  }\n  else if (word === 'then') tokens.push({ type: 'symbol', value: ')' });\n  else tokens.push({ type: 'word', value: word });\n}\n\n// reads number to nonnumeric character\nfunction readNumber() {\n  let number = '';\n  // read to end of code\n  while (index < code.length) {\n    // break if not numeric character\n    if (!code[index].match(/[0-9]/)) {\n      index -= 1;\n      break;\n    }\n    // append char to number\n    number += code[index];\n    index += 1;\n  }\n  // push number token\n  tokens.push({ type: 'number', value: number });\n}\n\n// processes given character in token context\nfunction processChar(char) {\n  if (char === '#') readComment();\n  else if (char === '\"') readString();\n  else if (char.match(/[a-zA-Z_]/)) readWord();\n  else if (char.match(/[0-9]/)) readNumber();\n  else if (separators.includes(char)) tokens.push({ type: 'separator', value: char });\n  else if (operators.includes(char)) tokens.push({ type: 'operator', value: char });\n  else if (symbols.includes(char)) tokens.push({ type: 'symbol', value: char });\n}\n\n// lexes given sleekscript into tokens\nexport default function lex(inputCode) {\n  // set globals\n  index = 0;\n  code = inputCode;\n  tokens = [];\n  // read to end of code\n  while (index < code.length) {\n    // process character\n    const char = code[index];\n    processChar(char);\n    index += 1;\n  }\n  // return lexed tokens\n  return tokens;\n}\n","// globals\nlet index = 0;\nlet statement = undefined;\nlet code = '';\n\n// returns javascript version of given keyword\nfunction getKeyword(keyword) {\n  switch (keyword) {\n    // operators\n    case 'and': return '&&';\n    case 'or': return '||';\n    case 'is': return '===';\n    case 'isnt': return '!==';\n    case 'not': return '!';\n    // booleans\n    case 'yes': return 'true';\n    case 'no': return 'false';\n    case 'on': return 'true';\n    case 'off': return 'false';\n    // default\n    default: return keyword;\n  }\n}\n\n// returns javascript subtitution for given word\nfunction getSub(word) {\n  switch (word) {\n    // functions\n    case 'print': return 'console.log';\n    // default\n    default: return word;\n  }\n}\n\n// processes given token in javascript context\nfunction processToken(token) {\n  if (token.type === 'comment') code += `//${token.value}`;\n  else if (token.type === 'string') code += `\"${token.value}\"`;\n  else if (token.type === 'keyword') code += getKeyword(token.value);\n  else if (token.type === 'sub') code += getSub(token.value);\n  else code += token.value;\n}\n\n// returns whether to pad given token\nfunction doPad(token, prevToken) {\n  // operator after operator [++, -=]\n  if (token.type === 'operator' && prevToken.type === 'operator') return false;\n  // symbol after non-operator [foo., bar)]\n  if (\n    token.type === 'symbol'\n    && prevToken.type !== 'operator' && prevToken.type !== 'keyword'\n  ) return false;\n  // non-operator after symbol [.foo, (bar]\n  if (\n    prevToken.type === 'symbol' && prevToken.value !== ')'\n    && token.type !== 'operator'\n  ) return false;\n  // non-operator after not keyword [!foo]\n  if (\n    prevToken.type === 'keyword' && prevToken.value === 'not'\n    && token.type !== 'operator'\n  ) return false;\n  // if none pass, return true\n  return true;\n}\n\n// returns code for given statement\nfunction getStatementCode(inputStatement) {\n  // set globals\n  index = 0;\n  statement = inputStatement;\n  code = '';\n  // read to end of statement\n  while (index < statement.length) {\n    // pad token\n    const token = statement[index];\n    if (index) {\n      if (token.type === 'comment') code += ';';\n      if (doPad(token, statement[index - 1])) code += ' ';\n    }\n    // process token\n    processToken(token);\n    index += 1;\n  }\n  // append semicolon if no comment\n  if (statement[statement.length - 1].type !== 'comment') code += ';';\n  // return statement code\n  return code;\n}\n\n// returns whether to newline given statement\nfunction doNewline(statement, prevStatement) {\n  // start of if statements\n  if (\n    statement[0].type === 'keyword' && statement[0].value === 'if' &&\n    !(prevStatement[0].type === 'keyword' && prevStatement[0].value === 'if')\n  ) return true;\n  // end of if statements\n  if (\n    !(statement[0].type === 'keyword' && statement[0].value === 'if') &&\n    prevStatement[0].type === 'keyword' && prevStatement[0].value === 'if'\n  ) return true;\n  // default to no newline\n  return false;\n}\n\n// parses given syntax tree into javascript\nexport default function parse(tree) {\n  let js = '';\n  const varnames = [];\n  // declare variables\n  for (const statement of tree) {\n    if (statement.length > 1) {\n       if (statement[0].type === 'word' && statement[1].type === 'operator') {\n         const varname = statement[0].value;\n         if (!varnames.includes(varname)) varnames.push(varname);\n      }\n    }\n  }\n  if (varnames.length) js += `var ${varnames.join(', ')};\\n\\n`\n  // for each statement in tree\n  let treeIndex = 0;\n  while (treeIndex < tree.length) {\n    // append statement code\n    const statement = tree[treeIndex];\n    if (treeIndex && doNewline(statement, tree[treeIndex - 1])) js += '\\n';\n    js += getStatementCode(statement) + '\\n';\n    treeIndex += 1;\n  }\n  // return parsed javascript\n  return js;\n}\n","import lex from './lexer.js';\nimport analyze from './analyzer.js';\nimport parse from './parser.js';\n\n// compiles given sleekscript into javascript\nexport function compile(code) {\n  const tokens = lex(code); // lex code into tokens\n  const tree = analyze(tokens); // analyze tokens into syntax tree\n  const js = parse(tree); // parse tree into javascript\n  return js; // return parsed javascript\n}\n","// analyzes given tokens into a syntax tree\nexport default function analyze(tokens) {\n  const tree = [];\n  let statement = [];\n  // for each token\n  for (const token of tokens) {\n    // if separator and statement, close statement\n    if (token.type === 'separator') {\n      if (statement.length) {\n        tree.push(statement);\n        statement = [];\n      }\n    }\n    // if not separator, push token\n    else statement.push(token);\n  }\n  // append trailing statement and return tree\n  if (statement.length) tree.push(statement);\n  return tree;\n}\n","import { useEffect, useState } from 'react';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/mode/coffeescript/coffeescript.js';\nimport 'codemirror/mode/javascript/javascript.js';\nimport { Controlled } from 'react-codemirror2';\nimport { compile } from '../../sleekscript/compiler.js';\n\nimport styles from './Editor.module.css';\n\n// delay in milliseconds for compiling\nconst compileDelay = 0;\n\n// default code to be displayed\nconst defaultCode =\n`a = yes # var a\nb = a # var b\nc = no # var c\n\nif a is b then print(\"a is b\")\nif b isnt c then print(\"b is not c\")\nif a is b or a is c then print(\"a is b or c\")\n\n# print result\nprint(a and b and c)\n`;\n\nexport default function Editor() {\n  const [inCode, setInCode] = useState(defaultCode);\n  const [outCode, setOutCode] = useState('');\n\n  // compile code when updated\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      const compiled = compile(inCode);\n      setOutCode(compiled);\n    }, compileDelay);\n    return () => clearTimeout(timeout);\n  }, [inCode]);\n\n  return (\n    <div className={styles.container}>\n      <Controlled\n        value={inCode}\n        onBeforeChange={(e, d, v) => setInCode(v)}\n        options={{\n          lineWrapping: true,\n          mode: 'coffeescript',\n          theme: 'material'\n        }}\n      />\n      <Controlled\n        value={outCode}\n        options={{\n          lineWrapping: true,\n          mode: 'javascript',\n          theme: 'material'\n        }}\n      />\n    </div>\n  );\n}\n","import Editor from '../Editor/Editor.js';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport PersonIcon from '@material-ui/icons/Person';\n\nimport styles from './App.module.css';\n\nexport default function App() {\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <h1>SleekScript</h1>\n        <div className={styles.links}>\n          <a\n            href=\"https://github.com/csaye/sleekscript\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <GitHubIcon />\n          </a>\n          <a\n            href=\"https://github.com/csaye/sleekscript#readme\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <DescriptionIcon />\n          </a>\n          <a\n            href=\"https://csaye.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <PersonIcon />\n          </a>\n        </div>\n      </div>\n      <Editor />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__16xz_\",\"header\":\"App_header__2MS2l\",\"links\":\"App_links__3UxjZ\"};"],"sourceRoot":""}