{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Credentials.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["userAccessToken","expiresIn","SearchBar","props","state","term","search","bind","reset","handleTermChange","handleKeyPress","this","onSearch","onReset","event","setState","target","value","key","className","placeholder","onChange","onKeyPress","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","preview","src","controls","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistName","playlistTracks","onSave","clientID","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","setTimeout","history","pushState","data","method","headers","Authorization","url","fetch","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","items","artists","uri","preview_url","savePlaylist","trackURIs","userID","playlistID","accessToken","body","JSON","stringify","uris","App","updatePlaylistName","indexOf","newPlaylistTracks","slice","push","trackIndex","splice","alert","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8be57feb.chunk.js","sourcesContent":["import credentials from './Credentials';\n\nlet userAccessToken;\nlet expiresIn;\nconst clientID = credentials.clientID;\nconst redirectURI = 'https://csaye.com/jamming/';\n\nconst Spotify = {\n  getAccessToken() {\n    if (userAccessToken) {\n      return userAccessToken;\n    }\n    const accessTokenRegex = /access_token=([^&]*)/;\n    const expiresInRegex = /expires_in=([^&]*)/;\n    const accessTokenMatch = window.location.href.match(accessTokenRegex);\n    const expiresInMatch = window.location.href.match(expiresInRegex);\n    if (accessTokenMatch && expiresInMatch) {\n      userAccessToken = accessTokenMatch[1];\n      expiresIn = expiresInMatch[1];\n      window.setTimeout(() => userAccessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/jamming/');\n      return userAccessToken;\n    } else {\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n    }\n  },\n  search(term) {\n    const data = {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${userAccessToken}`\n      }\n    };\n    const url = `https://api.spotify.com/v1/search?type=track&q=${term}`;\n    return fetch(url, data).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Search request failed!');\n    }, networkError => console.log(networkError.message)).then(jsonResponse => {\n      if (jsonResponse.tracks) {\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n          preview: track.preview_url\n        }));\n      }\n      console.log('no tracks found');\n      console.log(jsonResponse);\n      return [];\n    });\n  },\n  savePlaylist(name, trackURIs) {\n    if (!name || !trackURIs) {\n      return;\n    }\n    const accessToken = this.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userID;\n    let playlistID;\n    return fetch('https://api.spotify.com/v1/me', {\n      method: 'GET',\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Get request failed!');\n    }, networkError => console.log(networkError.message)).then(jsonResponse => {\n      userID = jsonResponse.id;\n      fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Post request failed!');\n      }, networkError => console.log(networkError.message)).then(jsonResponse => {\n        playlistID = jsonResponse.id;\n        fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({\n            uris: trackURIs\n          })\n        });\n      });\n    });\n  }\n};\n\nexport default Spotify;\n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: ''\n    };\n    this.search = this.search.bind(this);\n    this.reset = this.reset.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n  reset() {\n    this.props.onReset();\n  }\n  handleTermChange(event) {\n    this.setState({\n      term: event.target.value\n    });\n  }\n  handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      this.search();\n    }\n  }\n  render() {\n    return (\n      <div className=\"SearchBar\">\n      <input\n      placeholder=\"Enter A Song, Album, or Artist\"\n      onChange={this.handleTermChange}\n      onKeyPress={this.handleKeyPress}\n      />\n      <button className=\"SearchBarButton\" onClick={this.search}>SEARCH</button>\n      <button className=\"SearchBarButton\" onClick={this.reset}>RESET</button>\n    </div>\n  );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n  renderAction() {\n    if (this.props.isRemoval) {\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n    } else {\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n    }\n  }\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.name}</h3>\n          <p>{this.props.artist} | {this.props.album}</p>\n          {this.props.preview && <audio className=\"Track-preview\" src={this.props.preview} controls></audio>}\n        </div>{this.renderAction()}</div>\n    );\n  }\n}\n\nexport default Track;\n","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {this.props.tracks.map(track =>\n          <Track\n            track={track}\n            key={track.id}\n            name={track.name}\n            artist={track.artist}\n            album={track.album}\n            preview={track.preview}\n            onAdd={this.props.onAdd}\n            onRemove={this.props.onRemove}\n            isRemoval={this.props.isRemoval}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList\n        tracks={this.props.searchResults}\n        onAdd={this.props.onAdd}\n        onRemove={this.props.onRemove}\n        isRemoval={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input defaultValue={'New Playlist'} value={this.props.playlistName} onChange={this.handleNameChange} />\n        <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;\n","const credentials = {\n  clientID: 'e504b1e2b662429a80719d6beb1bf033'\n};\n\nexport default credentials;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n    this.reset = this.reset.bind(this);\n    Spotify.getAccessToken();\n  }\n  addTrack(track) {\n    const trackIndex = this.state.playlistTracks.indexOf(track);\n    if (trackIndex !== -1) {\n      return;\n    }\n    let newPlaylistTracks = this.state.playlistTracks.slice();\n    newPlaylistTracks.push(track);\n    this.setState({\n      playlistTracks: newPlaylistTracks\n    });\n  }\n  removeTrack(track) {\n    const trackIndex = this.state.playlistTracks.indexOf(track);\n    if (trackIndex === -1) {\n      return;\n    }\n    let newPlaylistTracks = this.state.playlistTracks.slice();\n    newPlaylistTracks.splice(trackIndex, 1);\n    this.setState({\n      playlistTracks: newPlaylistTracks\n    });\n  }\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n  savePlaylist() {\n    let trackURIs = this.state.playlistTracks.map(track => {\n      return track.uri;\n    });\n    Spotify.savePlaylist(this.state.playlistName, trackURIs);\n    alert(`Playlist \"${this.state.playlistName}\" saved successfully!`);\n  }\n  search(term) {\n    if (!term) {\n      return;\n    }\n    Spotify.search(term).then(tracks => {\n      this.setState({\n        searchResults: tracks\n      });\n    });\n  }\n  reset() {\n    this.setState({\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar\n          onSearch={this.search}\n          onReset={this.reset}\n          />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n              />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n              onRemove={this.removeTrack}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}