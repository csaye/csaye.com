{"version":3,"sources":["Spotify.js","info/Genres.js","App.js","reportWebVitals.js","index.js"],"names":["userAccessToken","expiresIn","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","setTimeout","history","pushState","search","terms","notTerms","genre","limit","years","offset","data","method","headers","Authorization","url","fetch","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","image","images","external_urls","uri","preview","preview_url","savePlaylist","trackURIs","userID","playlistID","accessToken","this","body","JSON","stringify","uris","genres","minimumYear","randomRange","min","max","Math","floor","random","Page","useState","setTracks","setTerms","setNotTerms","setGenre","minYear","setMinYear","currentYear","maxYear","setMaxYear","setLimit","playlistName","setPlaylistName","loading","setLoading","Date","getFullYear","e","a","preventDefault","alert","g","notT","mOffset","result","length","className","onSubmit","value","placeholder","maxLength","onChange","target","htmlFor","type","defaultValue","step","onClick","t","pName","Track","props","rel","src","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06622aa4.chunk.js","sourcesContent":["let userAccessToken;\nlet expiresIn;\nconst clientID = 'ec09509ab68c41f2a83b66cd2f254ca2';\nconst redirectURI = 'https://csaye.com/playlist-bot/';\n\nconst Spotify = {\n  getAccessToken() {\n    if (userAccessToken) {\n      return userAccessToken;\n    }\n    const accessTokenRegex = /access_token=([^&]*)/;\n    const expiresInRegex = /expires_in=([^&]*)/;\n    const accessTokenMatch = window.location.href.match(accessTokenRegex);\n    const expiresInMatch = window.location.href.match(expiresInRegex);\n    if (accessTokenMatch && expiresInMatch) {\n      userAccessToken = accessTokenMatch[1];\n      expiresIn = expiresInMatch[1];\n      window.setTimeout(() => userAccessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/playlist-bot/');\n      return userAccessToken;\n    } else {\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n    }\n  },\n\n  search(terms, notTerms, genre, limit, years, offset) {\n    const data = {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${userAccessToken}`\n      }\n    };\n    const url = `https://api.spotify.com/v1/search?type=track&offset=${offset}&limit=${limit}&q=${terms}${notTerms} year:${years} genre:\"${genre}\"`;\n    return fetch(url, data).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Search request failed!');\n    }, networkError => console.log(networkError.message)).then(jsonResponse => {\n      if (jsonResponse.tracks) {\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          image: track.album.images[0].url,\n          url: track.external_urls['spotify'],\n          uri: track.uri,\n          preview: track.preview_url\n        }));\n      }\n      return [];\n    });\n  },\n\n  savePlaylist(name, trackURIs) {\n    if (!name || !trackURIs) {\n      return;\n    }\n    const accessToken = this.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userID;\n    let playlistID;\n    return fetch('https://api.spotify.com/v1/me', {\n      method: 'GET',\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Get request failed!');\n    }, networkError => console.log(networkError.message)).then(jsonResponse => {\n      userID = jsonResponse.id;\n      fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Post request failed!');\n      }, networkError => console.log(networkError.message)).then(jsonResponse => {\n        playlistID = jsonResponse.id;\n        fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({\n            uris: trackURIs\n          })\n        });\n      });\n    });\n  }\n};\n\nexport default Spotify;\n","export const genres = [\n  'any genre',\n  'blues',\n  'chill',\n  'classical',\n  'club',\n  'country',\n  'dance',\n  'disco',\n  'drum and bass',\n  'dubstep',\n  'edm',\n  'electronic',\n  'emo',\n  'folk',\n  'funk',\n  'guitar',\n  'hardcore',\n  'hip-hop',\n  'holidays',\n  'house',\n  'k-pop',\n  'metal',\n  'party',\n  'piano',\n  'pop',\n  'rap',\n  'r-n-b',\n  'reggaeton',\n  'rock',\n  'sad',\n  'soul',\n  'techno',\n  'trance'\n]\n","import React, { useState } from 'react';\nimport './App.css';\nimport Spotify from './Spotify';\nimport { genres } from './info/Genres';\n\nconst minimumYear = 1960;\nconst maxOffset = 512;\n\n// returns a random value between min and max (min inclusive, max exclusive)\nconst randomRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Playlist Bot</h1>\n      </header>\n      <section>\n        { Spotify.getAccessToken() && <Page /> }\n      </section>\n    </div>\n  );\n}\n\nfunction Page() {\n  let [tracks, setTracks] = useState([]);\n  let [terms, setTerms] = useState('');\n  let [notTerms, setNotTerms] = useState('');\n  let [genre, setGenre] = useState(genres[0]);\n  let [minYear, setMinYear] = useState(minimumYear);\n  let [maxYear, setMaxYear] = useState(currentYear());\n  let [limit, setLimit] = useState(15);\n  let [playlistName, setPlaylistName] = useState('');\n\n  let [loading, setLoading] = useState(false);\n\n  function currentYear() {\n    let d = new Date();\n    return d.getFullYear();\n  }\n\n  async function search(e) {\n    e.preventDefault();\n\n    if (minYear > maxYear) {\n      alert('Please enter a valid year range.');\n      return;\n    }\n\n    setLoading(true);\n    setPlaylistName('');\n\n    let g = genre === 'any genre' ? '' : genre;\n    let years = `${minYear}-${maxYear}`;\n    let notT = notTerms ? ` NOT ${notTerms}` : '';\n\n    // calculate offset based on search specificity\n    let mOffset = maxOffset;\n    if (g !== '') mOffset /= 2; // if genre specified, reduce offset\n    if (maxYear - minYear < 20) mOffset /= 2; // if small year range, reduce offset\n    if (terms !== '') mOffset /= 4; // if terms specified, reduce offset\n    let offset = randomRange(0, mOffset);\n\n    Spotify.search(terms, notT, g, limit, years, offset).then(result => {\n      if (result.length === 0) {\n        alert('No tracks found. Please broaden your search scope.');\n      }\n      setLoading(false);\n      setTracks(result);\n    });\n  }\n\n  function savePlaylist() {\n    let trackURIs = tracks.map(t => {\n      return t.uri;\n    });\n    let pName = playlistName ? playlistName : 'New Playlist';\n    Spotify.savePlaylist(pName, trackURIs);\n    alert(`Playlist \"${pName}\" saved successfully`);\n  }\n\n  return (\n    <div className=\"Page\">\n      <div className=\"sidebar\">\n        <form onSubmit={search}>\n          <input className=\"textInput firstElem\" value={terms} placeholder=\"keyword(s)\" maxLength=\"64\" onChange={(e) => setTerms(e.target.value)} />\n          <input className=\"textInput\" value={notTerms} placeholder=\"excluded keyword(s)\" maxLength=\"64\" onChange={(e) => setNotTerms(e.target.value)} />\n\n          <select value={genre} onChange={(e) => setGenre(e.target.value)}>\n            {\n              genres.map(g => (\n                <option key={`genre-${g}`} value={g}>{g}</option>\n              ))\n            }\n          </select>\n\n          <label htmlFor=\"range-minyear\">Min Year: {minYear}</label>\n          <input\n          id=\"range-minyear\"\n          type=\"range\"\n          min={minimumYear} max={currentYear()} defaultValue={minYear}\n          step=\"1\"\n          onChange={(e) => setMinYear(e.target.value)}\n          / >\n\n          <label htmlFor=\"range-maxyear\">Max Year: {maxYear}</label>\n          <input\n          id=\"range-maxyear\"\n          type=\"range\"\n          min={minimumYear} max={currentYear()} defaultValue={currentYear()}\n          step=\"1\"\n          onChange={(e) => setMaxYear(e.target.value)}\n          / >\n\n          <label htmlFor=\"range-limit\">Track Count: {limit}</label>\n          <input\n          id=\"range-limit\"\n          type=\"range\"\n          min=\"1\" max=\"30\" defaultValue=\"15\"\n          step=\"1\"\n          onChange={(e) => setLimit(e.target.value)}\n          / >\n\n          <button type=\"submit\">Generate Playlist</button>\n        </form>\n      </div>\n      <div className=\"listing\">\n        {\n          loading && <p className=\"loadingText\" id=\"loadingText\">Loading...</p>\n        }\n        { (tracks.length > 0 && !loading) &&\n          <div className=\"saveTrack\">\n            <input\n            value={playlistName}\n            placeholder=\"playlist name\"\n            maxLength=\"64\"\n            onChange={(e) => setPlaylistName(e.target.value)}\n            />\n            <button onClick={savePlaylist}>Save Playlist</button>\n          </div>\n        }\n        {\n          !loading && tracks.map(t => <Track key={t.id} message={t} />)\n        }\n      </div>\n    </div>\n  );\n}\n\nfunction Track(props) {\n  const { name, artist, album, image, url } = props.message;\n\n  return (\n    <div className=\"Track\">\n      <a href={url} target=\"_blank\" rel=\"noreferrer\">\n        <img src={image} alt={album} />\n        <div className=\"text\">\n          <h1>{name}</h1>\n          <p>{artist}</p>\n          <p>{album}</p>\n        </div>\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}